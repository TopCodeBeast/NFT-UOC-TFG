{"version":3,"sources":["connectors.js","components/Utils/Loading.js","context/ConnectionContext.js","components/Utils/Connection.js","hooks/useEagerConnect.js","hooks/useInactiveListener.js","components/NFTMinter/Inputs.js","components/NFTMinter/ModalUploading.js","hooks/useContracts.js","hooks/useWeb3.js","hooks/useMarketContract.js","services/injectedUserService.js","components/NFTMinter/MinterForm.js","hooks/useNFTStorage.js","components/NFTMinter/Minter.js","components/Layout/Home.js","components/UserInfo/OffcanvasInfo.js","hooks/useTokenMetadata.js","components/Layout/Header.js","components/Layout/Footer.js","components/Market/Inputs.js","components/Market/MarketCreateSaleForm.js","components/Market/ModalCreateSale.js","components/Market/ModalUploading.js","components/Market/MarketCreateSale.js","components/Market/MarketViewModal.js","components/Market/MarketItem.js","components/Market/MarketItems.js","components/Market/Market.js","reducers/marketReducer.js","services/marketService.js","components/Loader.js","routers/AppRouter.js","App.js","index.js"],"names":["RPC_URLS","process","injected","InjectedConnector","supportedChainIds","parseInt","network","NetworkConnector","urls","defaultChainId","LoadingApp","err","className","Spinner","animation","ConnectionContext","createContext","ConnectionProvider","children","useState","data","connected","setConnected","Provider","value","ConnectedToRPC","RPC","context","useWeb3React","useContext","setErr","useEffect","isSubscribed","check","a","fetch","activate","message","interval","setInterval","clearInterval","triedEager","active","tried","setTried","isAuthorized","then","undefined","catch","useEagerConnect","suppress","error","ethereum","window","on","handleConnect","console","log","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener","useInactiveListener","NotConnectedMetamask","contextMetamask","textInputStyles","DescriptionInput","form","changeValue","Form","Group","controlId","Control","as","placeholder","onChange","e","target","description","required","TextInput","type","name","ImageInput","image","style","width","height","src","URL","createObjectURL","onClick","fluid","accept","event","files","file","alert","ModalUploading","txHash","loadingMint","uploading","reset","show","setShow","Modal","onHide","size","backdrop","keyboard","centered","Header","closeButton","Body","Alert","variant","GetMarketContract","provider","library","eth","Contract","MarketJSON","abi","networks","address","GetNftContract","NFTContract","fromEtherToWei","number","w3","httpProvider","Web3","providers","HttpProvider","getWeb3NoAccount","utils","toWei","switchNetwork","rpcUrls","params","toString","chainName","nativeCurrency","symbol","decimals","concat","blockExplorerUrls","request","method","useMarketContract","account","contract_network","contract_metamask","_address","isCreatingSale","setIsCreatingSale","isBuying","setIsBuying","singleSale","index","maxIndex","methods","sales","call","sale","createSale","price","tokenId","nftAddress","_price","send","from","result","buyItem","saleId","buy","useNFTContractService","market_address","loadingApprove","setLoadingApprove","setLoadingMint","setError","approve","mint","hash","safeMint","ownerBalance","balanceOf","balance","tokensList","i","tokenOfOwnerByIndex","push","ButtonSpinner","role","initialState","MinterForm","client","NFTStorage","token","setUploading","uploadToIpfs","store","ipnft","useNFTStorage","setForm","key","setTxHash","onSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","creator","txMint","Col","lg","Button","transactionHash","Minter","Home","connector","chainNetwork","addNetwork","url","ListGroup","color","textDecoration","href","rel","to","SingleNFTInfo","contract","getTokenURI","tokenURI","ipfsHash","metadataURI","useTokenURI","metadata","setMetadata","metadatauri","YourNFT","tokenIdList","setTokenIdList","map","AccountInfo","title","substring","OffCanvasInfo","Offcanvas","placement","ConnectButton","connecting","setConnecting","handleClick","disabled","Navbar","bg","expand","Container","Brand","Link","Toggle","Collapse","id","Nav","Text","Footer","SaleFormPrice","FloatingLabel","label","min","step","SaleFormSelect","tokenList","setTokenList","Select","selectedToken","CreateSaleForm","props","setShowSecond","txState","setTxState","handleSubmit","tx_approve","txApprove","tx_sale","txSale","readOnly","ModalCreateSale","headerText","showSecond","ButtonCreateSale","InfoList","item","tokenData","Item","NFTModalView","closeModal","imageUrl","handleBuy","fullscreen","Row","fromWei","MemoImage","React","memo","Card","Img","MarketItem","setTokenData","setImageUrl","getData","response","json","imageSrc","split","useTokenMetadata","etherPrice","Title","CustomPaginate","styled","ReactPaginate","attrs","activeClassName","Items","currentItems","PaginatedItems","itemsPerPage","saleItems","useSelector","state","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","slice","Math","ceil","breakLabel","nextLabel","onPageChange","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","MarketItems","Market","init","items","marketReducer","action","useMarketService","market_contract","setAddress","getAll","getTotalSales","totalSales","Loader","dispatch","useDispatch","AppRouter","path","exact","element","App","Web3ReactProviderReloaded","createWeb3ReactRoot","getLibrary","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc443e61.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport {NetworkConnector} from '@web3-react/network-connector'\r\n\r\n//mumbai 80001\r\n//local 1337\r\n\r\nexport const RPC_URLS = {\r\n    local: process.env.REACT_APP_LOCAL_RPC,\r\n    mumbai: process.env.REACT_APP_MUMBAI_RPC,\r\n}\r\nexport const SUPPORTED_CHAINS = {\r\n    local: 1337,\r\n    mumbai: 80001\r\n}\r\n\r\nconst injected = new InjectedConnector(\r\n    {\r\n        supportedChainIds: [parseInt(process.env.REACT_APP_DEFAULT_CHAIN_ID)]\r\n    }\r\n)\r\n\r\n\r\nconst network = new NetworkConnector({\r\n    urls: {\r\n        1337: RPC_URLS.local,\r\n        80001: RPC_URLS.mumbai,\r\n    },\r\n    defaultChainId: parseInt(process.env.REACT_APP_DEFAULT_CHAIN_ID),\r\n    \r\n})\r\n\r\nexport {\r\n    network,\r\n    injected\r\n}","import { Spinner } from \"react-bootstrap\"\r\n\r\n\r\nexport const LoadingApp = ({err}) => {\r\n    return(\r\n        <div className=\"h-100 d-flex justify-content-center align-items-center flex-column\">\r\n            <Spinner animation='border' className='mb-3'/>\r\n            <p>{err ? `${err} - Trying again in 20 seconds...` : 'Loading data from blockchain'}</p>\r\n        </div>\r\n    )}\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const ConnectionContext = createContext()\r\n\r\nconst ConnectionProvider = ({ children }) => {\r\n\r\n    const [connected, setConnected] = useState(false)\r\n\r\n    const data = {\r\n        connected, setConnected\r\n    }\r\n\r\n\r\n    return (\r\n        <ConnectionContext.Provider value={data}>\r\n            {children}\r\n        </ConnectionContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ConnectionProvider","import { useWeb3React } from '@web3-react/core'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { network } from '../../connectors'\r\nimport { LoadingApp } from './Loading'\r\nimport { useEagerConnect } from \"../../hooks/useEagerConnect\";\r\nimport { useInactiveListener } from \"../../hooks/useInactiveListener\"\r\nimport ConnectionProvider, { ConnectionContext } from '../../context/ConnectionContext';\r\n\r\n\r\nexport const ConnectedToRPC = ({children , RPC}) => {\r\n\r\n    const context = useWeb3React()\r\n    const {connected, setConnected} = useContext(ConnectionContext)\r\n    const [err, setErr] = useState('')\r\n\r\n    // check if node is up\r\n    useEffect(()=> {\r\n        let isSubscribed = true\r\n        const check = async () => {\r\n            try{\r\n                const result = await fetch(RPC)\r\n                if (isSubscribed){\r\n                    context.activate(network)\r\n                    setConnected(true)\r\n                }\r\n            }\r\n            catch(error){\r\n                setErr(error.message)\r\n            }\r\n        }\r\n        check()\r\n        const interval = setInterval(check,20000)\r\n        return ()=> {\r\n            isSubscribed = false\r\n            clearInterval(interval)\r\n        }\r\n    },[])\r\n\r\n    // // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\r\n    const triedEager = useEagerConnect()\r\n    useInactiveListener(!triedEager)\r\n\r\n    return(\r\n        <>\r\n            {connected \r\n                ?\r\n                children\r\n                : <LoadingApp err={err}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport const NotConnectedMetamask = ({ children }) => {\r\n    const contextMetamask = useWeb3React('metamask')\r\n\r\n    const [connected, setConnected] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        if (contextMetamask.active) {\r\n            setConnected(true);\r\n        }\r\n\r\n        return () => {\r\n            setConnected(false)\r\n        }\r\n    }, [contextMetamask])\r\n\r\n    return (\r\n        <>\r\n            {!connected \r\n            ?  \r\n                    <h2 className=\"my-4 text-center p-5\">Please connect your wallet </h2>\r\n            : children}\r\n        </>\r\n    )\r\n}\r\n\r\n","import { useWeb3React } from \"@web3-react/core\"\r\nimport { useEffect , useState} from \"react\"\r\nimport { injected } from \"../connectors\"\r\n\r\n\r\nexport function useEagerConnect() {\r\n    const { activate, active } = useWeb3React('metamask')\r\n  \r\n    const [tried, setTried] = useState(false)\r\n  \r\n    useEffect(() => {\r\n      injected.isAuthorized().then((isAuthorized) => {\r\n        if (isAuthorized) {\r\n          activate(injected, undefined, true).catch(() => {\r\n            setTried(true)\r\n          })\r\n        } else {\r\n          setTried(true)\r\n        }\r\n      })\r\n    }, []) // intentionally only running on mount (make sure it's only mounted once :))\r\n  \r\n    // if the connection worked, wait until we get confirmation of that to flip the flag\r\n    useEffect(() => {\r\n      if (!tried && active) {\r\n        setTried(true)\r\n      }\r\n    }, [tried, active])\r\n  \r\n    return tried\r\n  }","import { useWeb3React } from \"@web3-react/core\"\r\nimport { useEffect } from \"react\"\r\nimport { injected } from \"../connectors\"\r\n\r\nexport function useInactiveListener(suppress = false) {\r\n    const { active, error, activate } = useWeb3React()\r\n  \r\n    useEffect(() => {\r\n      const { ethereum } = window\r\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n        const handleConnect = () => {\r\n          console.log(\"Handling 'connect' event\")\r\n          activate(injected)\r\n        }\r\n        const handleChainChanged = (chainId) => {\r\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\r\n          activate(injected)\r\n        }\r\n        const handleAccountsChanged = (accounts) => {\r\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\r\n          if (accounts.length > 0) {\r\n            activate(injected)\r\n          }\r\n        }\r\n        const handleNetworkChanged = (networkId) => {\r\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\r\n          activate(injected)\r\n        }\r\n  \r\n        ethereum.on('connect', handleConnect)\r\n        ethereum.on('chainChanged', handleChainChanged)\r\n        ethereum.on('accountsChanged', handleAccountsChanged)\r\n        ethereum.on('networkChanged', handleNetworkChanged)\r\n  \r\n        return () => {\r\n          if (ethereum.removeListener) {\r\n            ethereum.removeListener('connect', handleConnect)\r\n            ethereum.removeListener('chainChanged', handleChainChanged)\r\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\r\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\r\n          }\r\n        }\r\n      }\r\n    }, [active, error, suppress, activate])\r\n  }","import { Form, Image } from 'react-bootstrap'\r\n\r\nconst textInputStyles = 'col-lg-6 mb-3 mx-auto w-75'\r\n\r\nexport const DescriptionInput = ({form, changeValue}) => {\r\n\r\n    return(\r\n        <Form.Group controlId='formDescription' className={textInputStyles}>\r\n            <Form.Control \r\n                as='textarea' \r\n                placeholder='NFT Description' \r\n                onChange={(e)=> changeValue(\"description\",e.target.value)} \r\n                value={form.description} \r\n                required/>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport const TextInput = ({form, changeValue}) => {\r\n\r\n    return(\r\n        <Form.Group controlId='formName' className={textInputStyles} >\r\n            <Form.Control \r\n                type='text' \r\n                placeholder='NFT Name' \r\n                onChange={(e)=> changeValue(\"name\",e.target.value)} \r\n                value={form.name} \r\n                required/>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport const ImageInput = ({form, changeValue}) => {\r\n\r\n    const imageStyles = {\r\n        width: \"250px\",\r\n        height: \"auto\",\r\n    }\r\n\r\n    const imageChange = (event) => {\r\n        if (event.target.files && event.target.files.length > 0) { // check if there are any files\r\n            let file = event.target.files[0] // get the first file\r\n            if (file.type !== 'image/png') { // check file type\r\n                alert('only accepting .png')\r\n                event.target.value = null //cleanup the input\r\n            }\r\n            else {\r\n                changeValue(\"image\",file);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n        {form.image\r\n            ? \r\n            <div className='mb-3 col-lg-6 mx-auto w-50 d-flex justify-content-center align-items-center'>\r\n                <Image \r\n                    style={imageStyles}  \r\n                    className='' \r\n                    src={URL.createObjectURL(form.image)} \r\n                    onClick={()=>changeValue(\"image\",\"\")} \r\n                    fluid />\r\n            </div>\r\n            :\r\n            <Form.Group controlId='formFile' className={textInputStyles}>\r\n                <Form.Control \r\n                    type='file' \r\n                    accept='image/png' \r\n                    onChange={imageChange} \r\n                    required />\r\n            </Form.Group>\r\n        }\r\n        </>\r\n    )\r\n}\r\n","import {  useEffect, useState } from 'react'\r\nimport { Modal , Spinner , Alert} from 'react-bootstrap'\r\n\r\nexport const ModalUploading = ({txHash, error, loadingMint, uploading, reset}) => {\r\n    \r\n    const [show, setShow] = useState(false)\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        reset()\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        if (uploading || loadingMint) setShow(true)\r\n\r\n    }, [uploading, loadingMint])\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} size=\"lg\" backdrop=\"static\" keyboard={false} centered>\r\n            {!uploading && !loadingMint &&\r\n            <Modal.Header closeButton={!uploading && !loadingMint}>\r\n            </Modal.Header>\r\n            }\r\n                <Modal.Body>\r\n                    <div className='d-flex flex-column gap-2 justify-content-center align-items-center py-2 h-100 w-100'>                       \r\n                        {error ? <Alert variant='danger'>{error}</Alert> : ''} \r\n                        {uploading || loadingMint \r\n                            ? \r\n                            <>\r\n                            <Spinner animation=\"border\" variant='info' className='mx-auto' /> \r\n                            {uploading ? <p className='text-break text-center my-auto'>Uploading your data to IPFS...</p> : ''}\r\n                            {loadingMint ? <p className='text-break text-center my-auto'>Awaiting your transaction to be mined...</p> : ''}\r\n\r\n                            </>\r\n                            : <p className='text-break text-center my-auto'> {!error ? `NFT Minted! tx hash: ${txHash}` : ''}</p>\r\n                        }\r\n                    </div>\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}","\r\n\r\nimport { useWeb3React } from \"@web3-react/core\"\r\n\r\nimport MarketJSON from '../contracts/Market.json'\r\nimport NFTContract from '../contracts/SimpleNFT.json'\r\n\r\nexport const GetMarketContract = (provider) => {\r\n    const {active,library, chainId} = useWeb3React(provider)\r\n    if (active) return new library.eth.Contract(MarketJSON.abi,MarketJSON.networks[chainId].address)\r\n}\r\n\r\nexport const GetNftContract = (provider) => {\r\n    const {active, library, chainId} = useWeb3React(provider)\r\n    if (active) return new library.eth.Contract(NFTContract.abi,NFTContract.networks[chainId].address)\r\n}\r\n","import { useWeb3React } from \"@web3-react/core\"\r\nimport Web3 from \"web3\";\r\n\r\nexport const getWeb3NoAccount = () => {\r\n    const httpProvider = new Web3.providers.HttpProvider(process.env.REACT_APP_LOCAL_RPC)\r\n    const web3NoAccount = new Web3(httpProvider)\r\n  \r\n    return web3NoAccount\r\n}\r\n\r\n\r\nexport const FromWeiToEther = (veryLargeNumber) => {\r\n    const {library} = useWeb3React()\r\n\r\n    if (veryLargeNumber <= 0) return null\r\n    return library.utils.fromWei(veryLargeNumber,'ether')\r\n}\r\n\r\nexport const fromEtherToWei = (number) => {\r\n    const w3 = getWeb3NoAccount()\r\n\r\n    if (number <= 0) return null\r\n    return w3.utils.toWei(number,'ether')\r\n}\r\n\r\nexport const switchNetwork = async (chainId , rpcUrls , active) => {\r\n    if(window.ethereum && !active){\r\n        let params = []\r\n        switch(chainId){\r\n            case 80001:\r\n                params = [{\r\n                    chainId:`0x${chainId.toString(16)}`,\r\n                    chainName: \"Mumbai\",\r\n                    nativeCurrency: {\r\n                        name:\"MATIC Token\",\r\n                        symbol:\"MATIC\",\r\n                        decimals:18\r\n                    },\r\n                    rpcUrls: [].concat(rpcUrls),\r\n                    blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\r\n\r\n                }]\r\n                break\r\n            case 1337:\r\n                params = [{\r\n                    chainId:`0x${chainId.toString(16)}`,\r\n                    chainName: \"Ganache\",\r\n                    nativeCurrency: {\r\n                        name:\"TEST Ether\",\r\n                        symbol:\"TEST Ether\",\r\n                        decimals:18\r\n                    },\r\n                    rpcUrls: [].concat(rpcUrls),\r\n                    blockExplorerUrls: [\"\"]\r\n                }]\r\n                break\r\n            default:\r\n        }\r\n\r\n        await window.ethereum.request({\r\n            method:\"wallet_addEthereumChain\",\r\n            params:params\r\n        })\r\n    }\r\n}","import { GetMarketContract } from \"./useContracts\"\r\nimport { useState } from \"react\"\r\nimport { useWeb3React } from \"@web3-react/core\"\r\n\r\nimport {fromEtherToWei} from './useWeb3'\r\n\r\nexport const useMarketContract = () => {\r\n    const {account, chainId} = useWeb3React('metamask')\r\n    \r\n    const contract_network = GetMarketContract()\r\n    const contract_metamask = GetMarketContract('metamask')\r\n\r\n    const address = contract_network ? contract_network._address : null\r\n    \r\n    const [isCreatingSale, setIsCreatingSale] = useState(false)\r\n\r\n    const [isBuying, setIsBuying] = useState(false)\r\n\r\n    const singleSale = async (index, maxIndex) => {\r\n        if (index > maxIndex) return\r\n        const sale = await contract_network.methods.sales(index).call()\r\n        return sale\r\n    }\r\n\r\n    const createSale = async (price , tokenId, nftAddress ) => {\r\n        try{\r\n            const _price = fromEtherToWei(price)\r\n            setIsCreatingSale(true)\r\n            const result = await contract_metamask.methods\r\n                .createSale(_price, tokenId, nftAddress)\r\n                .send({ from: account , chainId:chainId})\r\n            setIsCreatingSale(false)\r\n            return result\r\n        }\r\n        catch(err) {\r\n            setIsCreatingSale(false)\r\n        }\r\n    }\r\n\r\n    const buyItem = async (saleId, price) => {\r\n        setIsBuying(true)\r\n        try{\r\n            const result = await contract_metamask.methods\r\n                .buy(saleId)\r\n                .send({ from: account, chainId: chainId, value: price })\r\n            return result\r\n        }\r\n        catch(error){\r\n            console.log(error)\r\n            setIsBuying(false)\r\n        }\r\n        setIsBuying(false)\r\n \r\n    }\r\n    return {  singleSale  , createSale ,isCreatingSale, buyItem , isBuying , address }\r\n}\r\n\r\n\r\n\r\n","import { useWeb3React } from \"@web3-react/core\"\r\nimport { useState } from \"react\"\r\nimport { GetNftContract } from \"../hooks/useContracts\"\r\nimport { useMarketContract } from \"../hooks/useMarketContract\"\r\n\r\n\r\nexport const useNFTContractService = () => {\r\n    const contract_metamask = GetNftContract('metamask')\r\n    const {address:market_address} = useMarketContract()\r\n    const {account, chainId} = useWeb3React('metamask')\r\n\r\n    const [loadingApprove, setLoadingApprove] = useState(false)\r\n    const [loadingMint, setLoadingMint] = useState(false)\r\n    const [error, setError] = useState('')\r\n    const approve = async (tokenId) => {\r\n        try{\r\n            setLoadingApprove(true)\r\n            const result = await contract_metamask.methods\r\n                .approve(market_address, tokenId)\r\n                .send({from:account, chainId:chainId})\r\n            setLoadingApprove(false)\r\n            return result\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            setLoadingApprove(false)\r\n        }\r\n    }\r\n\r\n    const mint = async (hash) =>{\r\n        setError('')\r\n        try{\r\n            setLoadingMint(true)\r\n            const result = await contract_metamask.methods\r\n                .safeMint(account, hash)\r\n                .send({from:account , chainId:chainId})\r\n            setLoadingMint(false)\r\n            return result\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            setError(err.message)\r\n            setLoadingMint(false)\r\n        }\r\n    }\r\n\r\n    const ownerBalance = async () => {\r\n        setError('')\r\n        try{\r\n            const balance = await contract_metamask.methods\r\n                .balanceOf(account)\r\n                .call()\r\n            let tokensList = []\r\n            for(let i=0;i<balance;i++){\r\n                const tokenId = await contract_metamask.methods\r\n                    .tokenOfOwnerByIndex(account, i)\r\n                    .call()\r\n                tokensList.push(tokenId)\r\n            }\r\n            return tokensList\r\n\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            setError(err.message)\r\n        }\r\n    }\r\n\r\n\r\n    return {loadingApprove , approve ,loadingMint, mint, ownerBalance , error , setError}\r\n\r\n}","import { useState} from 'react'\r\nimport { TextInput, ImageInput, DescriptionInput } from './Inputs'\r\nimport { Form, Col, Spinner, Button } from 'react-bootstrap'\r\nimport { ModalUploading } from './ModalUploading'\r\nimport { useNFTStorage } from '../../hooks/useNFTStorage'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useNFTContractService } from '../../services/injectedUserService'\r\n\r\n\r\n\r\nconst ButtonSpinner = () => {\r\n    return <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n}\r\n\r\nconst initialState = {name:'',description:'', image:''}\r\n\r\nexport const MinterForm = () => {\r\n    const {account} = useWeb3React('metamask')\r\n\r\n    const {uploadToIpfs , uploading} = useNFTStorage()\r\n    const {mint, loadingMint , error, setError} = useNFTContractService()\r\n\r\n    const [form,setForm] = useState({name:'',description:'', image:''})\r\n    const changeValue = (key, value) => setForm({...form, [key]:value})\r\n\r\n    const [txHash, setTxHash] = useState('')\r\n\r\n    const onSubmit =  async (event) => {\r\n        event.preventDefault()\r\n\r\n        if (event.currentTarget.checkValidity() === false) event.stopPropagation()\r\n        try{\r\n            const hash = await uploadToIpfs({\r\n                name:form.name,\r\n                description:form.description,\r\n                image: form.image,\r\n                creator: account\r\n            })\r\n            const txMint = await mint(hash)\r\n            setTxHash(txMint)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n\r\n    const reset = () => {\r\n        setForm(initialState)\r\n        setError('')\r\n        setTxHash('')\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={onSubmit} className='my-4 h-100 p-3'>\r\n                <ImageInput form={form} changeValue={changeValue}/>\r\n                <TextInput form={form} changeValue={changeValue}/>\r\n                <DescriptionInput form={form} changeValue={changeValue}/>\r\n                <Col lg={12} className='mx-auto mb-3 w-75 d-flex flex-row-reverse'>\r\n                    <Button \r\n                        className='' \r\n                        type='submit'>\r\n                        {!uploading && !loadingMint ? 'Mint' : <ButtonSpinner />}\r\n                    </Button>\r\n                </Col>\r\n            </Form>\r\n            <ModalUploading error={error} txHash={txHash && txHash.transactionHash} loadingMint={loadingMint} uploading={uploading} reset={reset}/>\r\n        </>\r\n    )\r\n}\r\n","import { NFTStorage } from 'nft.storage'\r\nimport { useState } from 'react'\r\n\r\nexport const useNFTStorage = () => {\r\n    const client = new NFTStorage({token:process.env.REACT_APP_NFT_API})\r\n\r\n    const [uploading, setUploading] = useState(false)\r\n\r\n    const uploadToIpfs = async (data) => {\r\n        try{\r\n            setUploading(true)\r\n            const result = await client.store(data)\r\n            console.log(result)\r\n            setUploading(false)\r\n            return result.ipnft\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            setUploading(false)\r\n        }\r\n    }\r\n\r\n    return {uploadToIpfs , uploading}\r\n        \r\n}\r\n","//Custom\r\nimport { NotConnectedMetamask } from '../Utils/Connection'\r\n//Context\r\nimport { MinterForm } from './MinterForm'\r\n\r\n\r\nconst Minter = () => {\r\n\r\n    return (\r\n        <>\r\n            <div className='row'>\r\n                <h2 className=\"display-2 text-center my-4\">Minter</h2>\r\n                <hr className=\"mb-4\" />\r\n            </div>\r\n            <NotConnectedMetamask>\r\n                <MinterForm />\r\n            </NotConnectedMetamask>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default Minter","import { useWeb3React } from \"@web3-react/core\"\r\nimport { Button, ListGroup } from \"react-bootstrap\"\r\nimport { switchNetwork } from \"../../hooks/useWeb3\"\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst Home = () => {\r\n    const { active } = useWeb3React('metamask')\r\n    const { connector, chainId: chainNetwork } = useWeb3React()\r\n\r\n    const addNetwork = async () => {\r\n        await switchNetwork(chainNetwork, connector.providers[chainNetwork].url, active)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid py-3 text-center\">\r\n                <h1 className=\"display-5 fw-bold\">Welcome to the NFT market</h1>\r\n                <p className=\"fs-4 my-auto border-bottom border-2 w-100\">This site only works using Metamask, please install it if you want to create new NFT and sell them </p>\r\n                \r\n                <div className=\"d-flex flex-column justify-content-center gap-3 w-100 align-items-center\">\r\n                    <div className=\"col-lg-6 border-bottom border-top border-2 w-100 py-4\">\r\n                        <p className=\"fs-2\">Network details: </p>\r\n                        <ListGroup>\r\n                            <ListGroup><p>Chaind: {process.env.REACT_APP_DEFAULT_CHAIN_ID}</p></ListGroup>\r\n                            <ListGroup><p>RPC URL: {process.env.REACT_APP_DEFAULT_RPC}</p></ListGroup>\r\n                        </ListGroup>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                                <Button variant=\"primary\" onClick={addNetwork}>Add to metamask</Button>\r\n                            {!window.ethereum &&\r\n                                <Button variant=\"outline-primary\">\r\n                                    <a style={{ color: 'inherit', textDecoration: 'none' }} href='https://metamask.io/' target='_blank' rel='noreferrer'>\r\n                                        Install Metamask\r\n                                    </a>\r\n                                </Button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n        \r\n                    <div className=\"col-lg-6 border-bottom border-2 w-100 py-4\">\r\n                        <p className=\"fs-2\">Links</p>\r\n                        <Link to=\"/minter\"><p>Minter</p></Link>\r\n                        <Link to=\"/market\"><p>Market</p></Link>\r\n                    \r\n                        \r\n                    </div>\r\n                </div>\r\n                \r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default Home\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { Button, Offcanvas } from 'react-bootstrap'\r\n\r\nimport { useNFTContractService } from '../../services/injectedUserService'\r\n\r\nimport { useTokenURI} from '../../hooks/useTokenMetadata'\r\n\r\n\r\nconst SingleNFTInfo = ({tokenId}) => {\r\n    const {getTokenURI} = useTokenURI()\r\n\r\n    const [metadata, setMetadata] = useState('')\r\n    \r\n    \r\n    useEffect(()=>{\r\n        const call = async () =>{\r\n            const metadatauri = await getTokenURI(tokenId)\r\n            setMetadata(metadatauri)\r\n        }\r\n        call()\r\n    },[])\r\n\r\n    return(\r\n        <>\r\n            <p className='text-break'>\r\n                {metadata &&  <a href={metadata} target=\"_blank\">#{tokenId}</a>}\r\n            </p>\r\n        </>\r\n    )\r\n}\r\n\r\nconst YourNFT = () => {\r\n    const {ownerBalance} = useNFTContractService()\r\n\r\n    const [tokenIdList, setTokenIdList] = useState([])\r\n\r\n    useEffect(()=>{\r\n        ownerBalance().then(result => setTokenIdList(result)).catch(console.log)\r\n    },[])\r\n\r\n\r\n    return(\r\n        <>\r\n            <div className='text-center'>\r\n                    <p className=\"display-5\">Your NFT</p>\r\n                    {tokenIdList && tokenIdList.length > 0 \r\n                    ?\r\n                    <div className='d-flex flex-row flex-wrap justify-content-center gap-3'>\r\n                        {tokenIdList.map(tokenId => <SingleNFTInfo tokenId={tokenId} key={tokenId}/>) }\r\n                    </div>\r\n                    : <p className='fs-4'>You have no NFT</p>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst AccountInfo = () => {\r\n    const {account, chainId} = useWeb3React('metamask')\r\n\r\n    return(\r\n        <>\r\n            <div className='text-center'>\r\n                    <p className='display-5'>Account</p>\r\n                    <p className='text-break'>Account: <abbr title={account}>{account.substring(0, 6)}...{account.substring(account.length - 4)} </abbr></p>\r\n                    <p className='text-break'>Chain: {chainId}</p>\r\n                    \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const OffCanvasInfo = ({show, setShow}) => {\r\n\r\n    const onHide = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Offcanvas show={show} onHide={onHide} placement=\"end\" className=\"\">\r\n                <Offcanvas.Header closeButton>\r\n                    <p className='display-4 text-center'>Account info</p>\r\n                </Offcanvas.Header>\r\n                <Offcanvas.Body>\r\n                    <AccountInfo/>\r\n                    <YourNFT/>\r\n\r\n                </Offcanvas.Body>\r\n            </Offcanvas>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport { GetNftContract} from \"./useContracts\"\r\n\r\nexport const useTokenMetadata = () => {\r\n    \r\n    const contract = GetNftContract()\r\n    \r\n    const getData = async (tokenId) => {\r\n        if(contract){\r\n        try{\r\n            const ipfsHash = await contract.methods.tokenURI(tokenId).call()\r\n            const url = `https://${ipfsHash}.ipfs.dweb.link/metadata.json`\r\n            const response = await fetch(url)\r\n            const data = await response.json()\r\n            const imageSrc = `https://ipfs.io/ipfs/${data.image.split('/')[2]}/${data.image.split('/')[3]}`\r\n            \r\n            return {data:data, url:imageSrc}\r\n        }\r\n        catch(err){console.log(err)}\r\n        }\r\n    }\r\n    return { getData}\r\n}\r\n\r\nexport const useTokenURI = () => {\r\n    const contract = GetNftContract()\r\n\r\n    const getTokenURI = async (tokenId) => {\r\n        if(contract){\r\n        try{\r\n            const ipfsHash = await contract.methods.tokenURI(tokenId).call()\r\n            const metadataURI = `https://${ipfsHash}.ipfs.dweb.link/metadata.json`       \r\n            \r\n            return metadataURI\r\n        }\r\n        catch(err){console.log(err)}\r\n        }\r\n    }\r\n    return { getTokenURI}\r\n}","import { useWeb3React } from '@web3-react/core'\r\nimport React, { useContext, useState } from 'react'\r\nimport { Nav, Navbar, Container, Button } from 'react-bootstrap'\r\nimport { injected } from '../../connectors'\r\nimport { Link } from 'react-router-dom'\r\nimport { switchNetwork } from '../../hooks/useWeb3'\r\nimport { ConnectionContext } from '../../context/ConnectionContext'\r\nimport { OffCanvasInfo } from '../UserInfo/OffcanvasInfo'\r\n\r\nconst ConnectButton = ({show,setShow}) => {\r\n    const { active, activate} = useWeb3React('metamask')\r\n    const { connector, chainId:chainNetwork} = useWeb3React()\r\n    const {connected} = useContext(ConnectionContext)\r\n    const [connecting, setConnecting] = useState(false)\r\n    \r\n    const handleClick = async () => {\r\n        try{\r\n            setConnecting(true)\r\n            await activate(injected)\r\n            await switchNetwork(chainNetwork, connector.providers[chainNetwork].url, active)\r\n            setConnecting(false)\r\n        }catch(err){\r\n            console.log(err)\r\n            setConnecting(false)\r\n        }\r\n    }\r\n\r\n    const connectedClick = () => setShow(true)\r\n     \r\n    return (\r\n        <>\r\n            <Button\r\n                variant={active ? \"outline-success\" : \"outline-warning\"}\r\n                onClick={active ? connectedClick : handleClick}\r\n                disabled={!connected}\r\n            >\r\n                {connecting ? 'Loading' : active ? <><span>Connected</span>  </> : 'Connect'}\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Header = () => {\r\n    const [show,setShow] = useState(false)\r\n    const {active} = useWeb3React('metamask')\r\n    const {connected} = useContext(ConnectionContext)\r\n    return (\r\n        <>\r\n        <header className='mb-4'>\r\n            <Navbar bg='dark' variant='dark' expand='lg' >\r\n                <Container>\r\n                    <Navbar.Brand as={Link} to='/' href='/'>Mercat</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"header-navigation-navbar\" />\r\n                    <Navbar.Collapse className='justify-content-end' id='header-navigation-navbar'>\r\n                        <Nav className='text-center'>\r\n                            <Nav.Link as={Link} to='/minter' href=\"/minter\" className='my-auto'> Minter </Nav.Link>\r\n                            <Nav.Link as={Link} to='/market' href=\"/market\" className='my-auto'> Market </Nav.Link>\r\n                            <Navbar.Text>\r\n                                <ConnectButton show={show}  setShow={setShow}/>\r\n                            </Navbar.Text>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n        {connected && active && <OffCanvasInfo show={show} setShow={setShow}/>} \r\n        </>\r\n    )\r\n}\r\nexport default Header","import { Container } from \"react-bootstrap\"\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <Container>\r\n            <footer className=\"d-flex py-3 my-4 border-top justify-content-center\">\r\n                Made with ♥ by Ismael\r\n            </footer>\r\n        </Container>\r\n    )\r\n}\r\nexport default Footer","import { useEffect, useState } from \"react\"\r\nimport { Form, FloatingLabel, Button } from \"react-bootstrap\"\r\nimport { useNFTContractService } from \"../../services/injectedUserService\"\r\n\r\n\r\nexport const SaleFormSubmit = () => {\r\n    return (\r\n        <Button\r\n            variant=\"primary\"\r\n            type=\"submit\"\r\n        >\r\n            Create\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport const SaleFormPrice = ({ form, setForm }) => {\r\n    return (\r\n        <FloatingLabel className='mb-3' label='Price'>\r\n            <Form.Control\r\n                type='number'\r\n                name='price' placeholder='0.00'\r\n                min='0.1' step='0.1'\r\n                onChange={(event) => setForm({ ...form, price: event.target.value })}\r\n                value={form.price}\r\n                required />\r\n        </FloatingLabel>\r\n    )\r\n}\r\n\r\n\r\nexport const SaleFormSelect = ({ form, setForm }) => {\r\n    \r\n    const {ownerBalance} = useNFTContractService()\r\n\r\n    const [tokenList, setTokenList] = useState([])\r\n\r\n    useEffect(() => {\r\n        let isSubscribed = true\r\n        if(isSubscribed){\r\n        ownerBalance()\r\n            .then(result => setTokenList(result))\r\n            .catch(err => console.log(err))\r\n        }\r\n        return ()=> isSubscribed=false\r\n    }, [ownerBalance])\r\n\r\n\r\n    return (\r\n        <FloatingLabel className='mb-3' label='Pick one of your NFT'>\r\n            {tokenList\r\n                ?\r\n                <Form.Select\r\n                    name='currentOption'\r\n                    onChange={(event) => setForm({ ...form, selectedToken: event.target.value })}\r\n                    required\r\n                >\r\n                    <option key={-1} value=\"\">{tokenList && tokenList.length === 0 ? 'Loading your nft...' : ''}</option>\r\n                    {tokenList.map(tokenId =>\r\n                        <option key={tokenId} value={tokenId}>\r\n                            {tokenId}\r\n                        </option>\r\n                    )}\r\n                </Form.Select>\r\n                : <p>You currently have no NFT </p>\r\n            }\r\n        </FloatingLabel>\r\n    )\r\n}","import { useState } from \"react\"\r\nimport { Form , Button, } from \"react-bootstrap\"\r\nimport { GetNftContract } from \"../../hooks/useContracts\"\r\n\r\n\r\nimport { SaleFormPrice , SaleFormSelect } from \"./Inputs\"\r\n\r\nconst initialState = {selectedToken:'',price:\"0.1\"}\r\n\r\nexport const CreateSaleForm = (props) => {\r\n\r\n    const {\r\n        setShow, setShowSecond,\r\n        txState, setTxState,\r\n        createSale, \r\n        approve,\r\n        setError\r\n    } = props\r\n    \r\n    \r\n    const [form , setForm] = useState(initialState)\r\n    const formReset = () => setForm(initialState)\r\n    \r\n    const nftContract = GetNftContract('metamask')\r\n    const nftAddress = nftContract._address\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        if (event.currentTarget.checkValidity() === false) event.stopPropagation()\r\n        try{\r\n            setShowSecond(true)\r\n            const {price, selectedToken} = form\r\n            const tx_approve = await approve(selectedToken)\r\n            setTxState({...txState,txApprove:tx_approve})\r\n            const tx_sale = await createSale(price, selectedToken, nftAddress)\r\n            setTxState({txApprove:tx_approve,txSale:tx_sale})\r\n        }\r\n        catch (error){\r\n            setError(error)\r\n        }\r\n        formReset()\r\n        setShow(false)\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit} readOnly>\r\n            <SaleFormSelect form={form} setForm={setForm} />\r\n                <SaleFormPrice form={form} setForm={setForm}/>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Create\r\n                </Button>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n","//bootstrap\r\nimport {  Modal } from \"react-bootstrap\"\r\n//Custom\r\nimport {CreateSaleForm} from \"./MarketCreateSaleForm\"\r\n\r\n\r\nexport const ModalCreateSale = (props)=>{\r\n    //const {show , onHide , headerText, txState , setTxState} = props\r\n    const {\r\n        headerText,\r\n        show, setShow,\r\n        txState, setTxState,\r\n        showSecond, setShowSecond,\r\n        createSale, isCreatingSale,\r\n        approve, loadingApprove,\r\n        setError\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={()=> setShow(false)} centered>\r\n            <Modal.Header closeButton>{headerText}</Modal.Header>\r\n                <Modal.Body>\r\n                    <CreateSaleForm \r\n                        show={show} \r\n                        setShow={setShow} \r\n                        showSecond={showSecond}\r\n                        setShowSecond={setShowSecond}\r\n                        headerText={'Create a Sale'} \r\n                        txState={txState} \r\n                        setTxState={setTxState}\r\n                        createSale={createSale}                     \r\n                        isCreatingSale={isCreatingSale}\r\n                        approve={approve}\r\n                        loadingApprove={loadingApprove}\r\n                        setError={setError}\r\n                        />\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n\r\n    )\r\n}","import { Modal , Spinner,Alert} from \"react-bootstrap\"\r\n\r\nexport const ModalUploading = (props) => {\r\n    \r\n    const {\r\n        show,setShow,\r\n        txState,setTxState,\r\n        loadingApprove, isCreatingSale,\r\n        error\r\n     } = props\r\n    const onHide = () => {\r\n        setTxState({txApprove:'', txSale:''})\r\n        setShow(false)\r\n    }\r\n    return(\r\n        <Modal show={show} onHide={onHide} size=\"lg\" backdrop=\"static\" keyboard={false} centered>\r\n            {!loadingApprove && !isCreatingSale &&\r\n                <Modal.Header closeButton></Modal.Header>\r\n            }\r\n            <Modal.Body>\r\n                {error ? <Alert variant=\"danger\">{error}</Alert> : \"\"} \r\n                <div className=\"d-flex flex-column gap-2 justify-content-center align-items-center py-2 h-100 w-100\">\r\n                    {(loadingApprove || isCreatingSale) &&\r\n                    <>\r\n                        <Spinner animation=\"border\" variant=\"info\" className=\"mx-auto\" /> \r\n                        {loadingApprove && <p className=\"text-break text-center my-auto\">Awaiting the token approval...</p>}\r\n                        {isCreatingSale && <p className=\"text-break text-center my-auto\">Awaiting your sale to be created...</p>}\r\n                    </>\r\n                    }\r\n                    {txState && txState.txApprove && <p className=\"text-break text-center my-auto\">Approval tx : {txState.txApprove.transactionHash} </p>}\r\n                    {txState && txState.txSale && <p className=\"text-break text-center my-auto\">Sale Tx : {txState.txSale.transactionHash}</p>}\r\n                </div>\r\n\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}","import { useState } from \"react\"\r\n//web3\r\nimport { useWeb3React } from \"@web3-react/core\"\r\n//bootstrap\r\nimport { Button, Col } from \"react-bootstrap\"\r\n//Custom\r\n\r\nimport { ModalCreateSale } from \"./ModalCreateSale\"\r\nimport { useMarketContract } from \"../../hooks/useMarketContract\"\r\nimport { useNFTContractService } from \"../../services/injectedUserService\"\r\nimport { ModalUploading } from \"./ModalUploading\"\r\n\r\nexport const ButtonCreateSale = () => {\r\n    const context = useWeb3React('metamask')\r\n    const {createSale , isCreatingSale} = useMarketContract()\r\n    const {approve , loadingApprove, error , setError} = useNFTContractService()\r\n\r\n    const [txState, setTxState] = useState({txApprove:'', txSale:''}) \r\n    const [show, setShow] = useState(false)\r\n    const [showSecond, setShowSecond] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            {context.active &&\r\n                <>\r\n                    <Col className='ms-3'>\r\n                        <Button onClick={()=>setShow(true)}>Create a sale</Button>\r\n                    </Col>\r\n                    <ModalCreateSale \r\n                        show={show} \r\n                        setShow={setShow} \r\n                        showSecond={showSecond}\r\n                        setShowSecond={setShowSecond}\r\n                        headerText={'Create a Sale'} \r\n                        txState={txState} \r\n                        setTxState={setTxState}\r\n                        createSale={createSale}                     \r\n                        isCreatingSale={isCreatingSale}\r\n                        approve={approve}\r\n                        loadingApprove={loadingApprove}\r\n                        setError={setError}\r\n                    />\r\n                    <ModalUploading \r\n                        show={showSecond}\r\n                        setShow={setShowSecond}\r\n                        txState={txState}\r\n                        setTxState={setTxState}\r\n                        isCreatingSale={isCreatingSale}\r\n                        loadingApprove={loadingApprove}\r\n                        error={error}\r\n                    />\r\n                        \r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}","import { useWeb3React } from \"@web3-react/core\"\r\nimport { Button, Modal, ListGroup, Col, Row , Image,  } from \"react-bootstrap\"\r\n\r\nimport { useMarketContract } from \"../../hooks/useMarketContract\"\r\n\r\n\r\nconst InfoList = ({ item, tokenData }) => {\r\n\r\n    return (\r\n        <ListGroup className=''>\r\n            <ListGroup.Item className=\"d-flex justify-content-between align-items-start\">\r\n                <div className=\"ms-2 me-auto\">\r\n                    <div className=\"fw-bold\">Name</div>\r\n                    <p className=\"text-break my-auto\">{tokenData.name ? tokenData.name : 'Loading...'}</p>\r\n                </div>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"d-flex justify-content-between align-items-start\">\r\n                <div className=\"ms-2 me-auto\">\r\n                    <div className=\"fw-bold\">Description</div>\r\n                    <p className=\"text-break\">{tokenData.description ? tokenData.description : 'Loading...'}</p>\r\n                </div>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"d-flex justify-content-between align-items-start\">\r\n                <div className=\"ms-2 me-auto\">\r\n                    <div className=\"fw-bold\">Creator</div>\r\n                    <p className='text-break'>{tokenData.creator ? tokenData.creator : 'Loading...'}</p>\r\n                </div>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"d-flex justify-content-between align-items-start\">\r\n                <div className=\"ms-2 me-auto\">\r\n                    <div className=\"fw-bold\">Contract Address</div>\r\n                    <p className='text-break'>{item.nftAddress}</p>\r\n                </div>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"d-flex justify-content-between align-items-start\">\r\n                <div className=\"ms-2 me-auto\">\r\n                    <div className=\"fw-bold\">Token Id</div>\r\n                    <p className='text-break'>{item.tokenId}</p>\r\n                </div>\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    )\r\n\r\n}\r\n\r\nexport const NFTModalView = ({ show, closeModal, item, tokenData ,imageUrl}) => {\r\n\r\n    const contextMetamask = useWeb3React('metamask')\r\n    const {library} = useWeb3React()\r\n    const {buyItem } = useMarketContract()\r\n    \r\n    const handleBuy = async () => {\r\n            buyItem(item.saleId,item.price)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={closeModal}\r\n            fullscreen={true}\r\n        >\r\n            <Modal.Header closeButton className=\"bg-dark text-white\">\r\n                <span className=\"text-break\">Sale #{item.saleId}</span>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"\">\r\n                <Row className=\"align-items-center h-100 g-3\">\r\n                    <Col lg={6} className=\"text-center\">\r\n                        <Image src={imageUrl} className=\"\" fluid/>\r\n                    </Col>\r\n  \r\n                    <Col lg={6} className=''>\r\n                        <InfoList item={item} tokenData={tokenData} />\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"bg-dark text-white\">\r\n                <div>\r\n                    {library && item.price && library.utils.fromWei(item.price,'ether')} ether\r\n                </div>\r\n                <Button variant=\"secondary\" disabled={!contextMetamask.active} onClick={handleBuy}>\r\n                    {!contextMetamask.active ? \"Connect your wallet to buy this asset\" : \"Buy\"} \r\n                </Button>\r\n            </Modal.Footer>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { Card, Button , Spinner } from \"react-bootstrap\"\r\nimport { useWeb3React } from \"@web3-react/core\"\r\n\r\nimport { NFTModalView } from \"./MarketViewModal\"\r\n\r\nimport { useTokenMetadata } from \"../../hooks/useTokenMetadata\"\r\n\r\n\r\nconst MemoImage = React.memo(function Image({src}){\r\n    return <Card.Img variant=\"top\" src={src}/>\r\n})\r\n\r\n\r\nexport const MarketItem = ({ item }) => {\r\n\r\n    const [tokenData, setTokenData] = useState('')\r\n    const [imageUrl , setImageUrl] = useState('')\r\n    const {getData} = useTokenMetadata()\r\n\r\n    const {library} = useWeb3React()\r\n    const [show, setShow] = useState(false)\r\n    const closeModal = () => setShow(false)\r\n\r\n    const etherPrice = library.utils.fromWei(item.price, 'ether')\r\n    \r\n    useEffect(()=>{\r\n        const call = async () =>{\r\n            try{\r\n                const {data,url} = await getData(item.tokenId)\r\n                setTokenData(data)\r\n                setImageUrl(url)\r\n            }\r\n            catch(error){console.log(error)}\r\n        }\r\n        call()\r\n            \r\n    },[])\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                {imageUrl ? <MemoImage src={imageUrl}/> : <Spinner animation='border' />}\r\n                <Card.Body className='text-center'>\r\n                    <Card.Title>\r\n                    {tokenData ? <>{tokenData.name} - #{item.tokenId}</> : <Spinner className='' animation=\"border\" variant=\"danger\" /> }\r\n                    </Card.Title>\r\n                    <Card.Text >\r\n                    <>{etherPrice && <>{etherPrice}</>}  </>\r\n                    </Card.Text>\r\n                    {tokenData && \r\n                        <Button \r\n                            className='w-100' \r\n                            variant=\"primary\"\r\n                            onClick={()=>setShow(true)}\r\n                            >\r\n                            View\r\n                        </Button>}\r\n                </Card.Body>\r\n            </Card>\r\n            <NFTModalView show={show} closeModal={closeModal} item={item} tokenData={tokenData} imageUrl={imageUrl}/>\r\n        </>\r\n    )\r\n}","\r\nimport {Col, Container, Spinner } from 'react-bootstrap'\r\nimport { MarketItem } from \"./MarketItem\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { useEffect , useState } from 'react'\r\nimport ReactPaginate from 'react-paginate';\r\nimport styled from 'styled-components';\r\n\r\nconst CustomPaginate = styled(ReactPaginate).attrs({\r\n    // You can redifine classes here, if you want.\r\n    activeClassName: 'active', // default to \"disabled\"\r\n  })`\r\n    margin-bottom: 2rem;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    flex-wrap:wrap;\r\n    list-style-type: none;\r\n    padding: 0 5rem;\r\n    li a {\r\n      border-radius: 7px;\r\n      padding: 0.1rem 1rem;\r\n      border: gray 1px solid;\r\n      cursor: pointer;\r\n    }\r\n    li.previous a,\r\n    li.next a,\r\n    li.break a {\r\n      border-color: transparent;\r\n    }\r\n    li.active a {\r\n      background-color: #0366d6;\r\n      border-color: transparent;\r\n      color: white;\r\n      min-width: 32px;\r\n    }\r\n    li.disabled a {\r\n      color: grey;\r\n    }\r\n    li.disable,\r\n    li.disabled a {\r\n      cursor: default;\r\n    }\r\n  `;\r\n\r\nfunction Items({currentItems}) {\r\n    return(\r\n        <>\r\n            {currentItems && currentItems.length > 0 &&\r\n                currentItems.map(item => (\r\n                    item.active && <Col key={item.saleId}><MarketItem item={item}/></Col>\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nfunction PaginatedItems({itemsPerPage}) {\r\n    const saleItems = useSelector(state => state)\r\n    // We start with an empty list of items.\r\n    const [currentItems, setCurrentItems] = useState(null);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    // Here we use item offsets; we could also use page offsets\r\n    // following the API or data you're working with.\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // Fetch items from another resources.\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        //console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n        setCurrentItems(saleItems.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(saleItems.length / itemsPerPage));\r\n    }, [itemOffset, itemsPerPage, saleItems]);\r\n\r\n      // Invoke when user click to request another page.\r\n    const handlePageClick = (event) => {\r\n        const newOffset = (event.selected * itemsPerPage) % saleItems.length;\r\n        // console.log(\r\n        // `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n        // );\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Items currentItems={currentItems}/>\r\n            <div className='col-lg-12 mt-4'>\r\n                <CustomPaginate\r\n                    breakLabel=\"...\"\r\n                    nextLabel=\"next >\"\r\n                    onPageChange={handlePageClick}\r\n                    pageRangeDisplayed={2}\r\n                    pageCount={pageCount}\r\n                    previousLabel=\"< previous\"\r\n                    renderOnZeroPageCount={null}\r\n                />  \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const MarketItems = () => {\r\n    const saleItems = useSelector(state => state)\r\n\r\n    return (\r\n        <Container className='row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 py-4'>\r\n            {saleItems && saleItems.length > 0 \r\n            ? \r\n                <PaginatedItems itemsPerPage={3}/>\r\n            :\r\n            <div className='d-flex justify-content-center w-100 flex-column align-items-center gap-2'>\r\n                <Spinner animation=\"grow\" size=\"lg\" className=\"\" />\r\n                <p className='fs-2'>Loading data from market...</p>\r\n            </div>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n// export const MarketItems = () => {\r\n//     const saleItems = useSelector(state => state)\r\n\r\n\r\n//     return (\r\n//         <Container className='row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 py-4'>\r\n//             {saleItems && saleItems.length > 0 \r\n//             ? \r\n//                 saleItems.map(item => (\r\n//                 item.active && <Col key={item.saleId}><MarketItem item={item} /></Col>))\r\n//             :\r\n//             <div className='d-flex justify-content-center w-100 flex-column align-items-center gap-2'>\r\n//                 <Spinner animation=\"grow\" size=\"lg\" className=\"\" />\r\n//                 <p className='fs-2'>Loading data from market...</p>\r\n//             </div>\r\n//             }\r\n//         </Container>\r\n//     )\r\n// }","\r\nimport { ButtonCreateSale } from \"./MarketCreateSale\"\r\nimport { MarketItems } from \"./MarketItems\"\r\n\r\n\r\nconst Market = () => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='row'>\r\n                <div className='col'>\r\n                    <h2 className=\"display-2 text-center mb-4\">Market</h2>\r\n                </div>\r\n                <hr className=\"mb-4 \" />\r\n            </div>\r\n\r\n            <>\r\n                <ButtonCreateSale />\r\n                <MarketItems />\r\n            </>\r\n        </>\r\n    )\r\n}\r\nexport default Market","\r\nconst marketReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case \"INIT\":\r\n            return action.data\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const init = (items) => {\r\n    return {\r\n        type: \"INIT\",\r\n        data:  items\r\n    }\r\n}\r\n\r\nexport default marketReducer","import { GetMarketContract } from \"../hooks/useContracts\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\n\r\nconst useMarketService = () => {\r\n    const market_contract = GetMarketContract()\r\n    const [address, setAddress] = useState()\r\n    \r\n    useEffect(() => {\r\n        if(market_contract) setAddress(market_contract._address)\r\n        return () => {\r\n            \r\n        }\r\n    }, [market_contract])\r\n\r\n    const getAll = async () => {\r\n        let items = []\r\n        try{\r\n            const totalSales = await market_contract.methods.getTotalSales().call()\r\n            for (let i = 0; i < totalSales; i++) {\r\n                const sale = await market_contract.methods.sales(i).call()\r\n                sale.saleId = i\r\n                if(sale.active) items.push(sale)\r\n            }   \r\n            return items\r\n        }\r\n        catch(err){console.log(err)}\r\n    }\r\n    \r\n    return {getAll , address , market_contract}\r\n}\r\n\r\nexport default useMarketService","\r\nimport { useContext, useEffect } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { ConnectionContext } from \"../context/ConnectionContext\"\r\nimport { init } from \"../reducers/marketReducer\"\r\nimport useMarketService from \"../services/marketService\"\r\n\r\n\r\nexport const Loader = ({children}) => {\r\n    const {getAll , market_contract} = useMarketService()\r\n    const dispatch = useDispatch()\r\n    const {connected} = useContext(ConnectionContext)\r\n\r\n    useEffect(()=>{\r\n\r\n        if(connected && market_contract){\r\n            getAll()\r\n                .then(items => dispatch(init(items)))\r\n                .catch(err => console.log(err))\r\n        }\r\n\r\n        const interval = setInterval(()=>{\r\n            getAll()\r\n                .then(items => dispatch(init(items)))\r\n                .catch(err => console.log(err))\r\n            console.log('fetching. . .')\r\n        },20000)\r\n        return ()=> clearInterval(interval)\r\n\r\n    },[dispatch, getAll, connected, market_contract])\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n        </>\r\n    )\r\n}","import {\r\n    BrowserRouter as Router,\r\n    HashRouter,\r\n    Routes, Route,\r\n} from \"react-router-dom\"\r\n\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nimport Minter from \"../components/NFTMinter/Minter\";\r\nimport Home from \"../components/Layout/Home\";\r\nimport Header from '../components/Layout/Header'\r\nimport Footer from '../components/Layout/Footer'\r\n\r\nimport Market from \"../components/Market/Market\";\r\n\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nimport { Loader } from \"../components/Loader\";\r\nimport { ConnectedToRPC } from \"../components/Utils/Connection\";\r\n\r\nconst AppRouter = () => {\r\n\r\n    const contextMetamask = useWeb3React('metamask')\r\n    const {error} = contextMetamask\r\n    \r\n    return (\r\n        <HashRouter>\r\n            <Header />\r\n            {error && <Alert variant=\"warning\">{error.message}</Alert>}\r\n            <ConnectedToRPC RPC={process.env.REACT_APP_DEFAULT_RPC}>\r\n\r\n                <Loader>\r\n                    <Container>\r\n                        <Routes>\r\n                            <Route path=\"/\" exact element={<Home/>}/>\r\n                            <Route path=\"/market\" exact element={<Market/>} />\r\n                            <Route path=\"/minter\" exact element={<Minter/>} />\r\n                            \r\n                            <Route path=\"*\" element={<h2>Not Found</h2>} />           \r\n                        </Routes>\r\n                    </Container>\r\n                </Loader>\r\n            </ConnectedToRPC>\r\n\r\n            <Footer/>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport {\r\n    AppRouter\r\n}","import { AppRouter } from \"./routers/AppRouter\"\r\nimport ConnectionProvider from './context/ConnectionContext';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className='h-100'>\r\n            <ConnectionProvider>\r\n                    <AppRouter/>\r\n            </ConnectionProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n//CSS\r\nimport './styles/style.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"bootswatch/dist/lux/bootstrap.min.css\"\r\n\r\n//REDUX\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\n\r\n//Web3\r\nimport { Web3ReactProvider , createWeb3ReactRoot} from '@web3-react/core'\r\nimport Web3 from 'web3';\r\nimport marketReducer from './reducers/marketReducer';\r\n\r\nconst Web3ReactProviderReloaded = createWeb3ReactRoot('metamask')\r\n\r\n\r\nfunction getLibrary(provider){\r\n  const library = new Web3(provider)\r\n  return library\r\n}\r\n\r\nconst store = createStore(marketReducer)\r\n\r\nReactDOM.render(\r\n  <Web3ReactProvider getLibrary={getLibrary}>\r\n    <Web3ReactProviderReloaded getLibrary={getLibrary}>\r\n      <Provider store={store}>\r\n        <App/>\r\n      </Provider>\r\n    </Web3ReactProviderReloaded>\r\n  </Web3ReactProvider>,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}